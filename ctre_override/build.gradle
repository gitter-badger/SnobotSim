import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem

repositories {
    mavenCentral()
    
    maven {
        url "http://dev.imjac.in/maven/"
    }
    maven {
        url "http://first.wpi.edu/FRC/roborio/maven/release/"
    }
}

apply plugin: 'cpp'
apply plugin: 'java'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../config.gradle'


sourceSets {
    main {
        java {
            srcDirs = ["ctre_source/java/src"]
        }
    }
}
test {
	ignoreFailures = !OperatingSystem.current().isWindows()
}

task packageNativeCtreFilesInJar(type: Jar) {
    destinationDir = project.buildDir
    classifier = "native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                println binary.component.name
                if (binary.component.name == 'CtrePhoenixJava' || 
                    binary.component.name == 'CtreMockHooks') 
                {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}

build.dependsOn packageNativeCtreFilesInJar

dependencies {
    compile project(":snobot_sim_utilities")
}


def jniClasses = ['com.ctre.phoenix.CTRLoggerJNI',
                  'com.ctre.phoenix.CANifierJNI',
                  'com.ctre.phoenix.motorcontrol.can.MotControllerJNI',
                  'com.ctre.phoenix.sensors.PigeonImuJNI']

model {
    jniConfigs {
        CtrePhoenixJava(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/../snobot_sim_gui/src/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
        }
    }
    exportsConfigs {
        CtreMockHooks(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
        CtrePhoenixJava(ExportsConfig) {
            x86SymbolFilter = { symbols->
                def retList = []
                return retList
            }
            x64SymbolFilter = { symbols->
                def retList = []
                return retList
            }
        }
    }

    components {
    
        CtreMockHooks(NativeLibrarySpec) {

            sources {
                cpp {
                    source {
                        srcDirs = [ "mock_hooks/src"]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = [ "ctre_libraries/include",
                                    "mock_hooks/include"]
                    }
                }
            }
        }
        
        CtrePhoenixJava(NativeLibrarySpec) {
            baseName = 'CTRE_PhoenixCCI'
            
            binaries {
                all {
                   it.lib project: ':ctre_override', library: 'CtreMockHooks', linkage: 'shared'
                }
            }
        
            sources {
                cpp {
                    source {
                        srcDirs = ['ctre_java_libraries/src']
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = [ "ctre_libraries/include"]
                    }
                }
            }
        }
            
    }
}


apply from: 'publish.gradle'
