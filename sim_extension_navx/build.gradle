import edu.wpi.first.nativeutils.NativeUtils

apply plugin: 'edu.wpi.first.NativeUtils'
apply plugin: 'cpp'

repositories {
    mavenCentral()
    maven {
        url "http://first.wpi.edu/FRC/roborio/maven/release/"
    }
}

ext.addNavxToLinker = { binary->
    binary.lib project: ':sim_extension_navx', library: 'navx_simulator', linkage: 'shared'
}

task packageNativeNavxFilesInJar(type: Jar) {
    destinationDir = project.buildDir
    classifier = "native-" + org.gradle.internal.os.OperatingSystem.current().getFamilyName();

    project.model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == 'navx_simulator') 
                {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}

build.dependsOn packageNativeNavxFilesInJar

if (!project.hasProperty('onlyAthena')) {
    ext.skipAthena = true

    apply from: "../config.gradle"


    model {
        dependencyConfigs {
            wpiutil(DependencyConfig) {
                groupId = 'edu.wpi.first.wpiutil'
                artifactId = 'wpiutil-cpp'
                headerClassifier = 'headers'
                ext = 'zip'
            version = getWpiUtilVersion()
                sharedConfigs = [ navx_simulator: [] ]
            }
            halsim(DependencyConfig) {
                groupId = 'edu.wpi.first.hal'
                artifactId = 'hal'
                headerClassifier = 'headers'
                ext = 'zip'
                version = getHalHeadersVersion()
                sharedConfigs = [ navx_simulator: [] ]
            }
        }
        exportsConfigs {
            navx_simulator(ExportsConfig) {
                x86ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                      '_CT??_R0?AVbad_cast',
                                      '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                      '_TI5?AVfailure' ]
                x64ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                      '_CT??_R0?AVbad_cast',
                                      '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                      '_TI5?AVfailure' ]
            }
        }
        components {
            navx_simulator(NativeLibrarySpec) {
                sources {
                    cpp {
                        source {
                            srcDirs = [ 'src/main/native/cpp' ]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = ["src/main/native/include"]
                        }
                    }
                }
            }
        }
    }
    apply from: 'publish.gradle'
}
